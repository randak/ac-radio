{"version":3,"sources":["components/HourSelect/HourSelect.module.css","components/PlayBar/PlayBar.module.css","components/Player/Player.module.css","components/ModePicker/ModePicker.module.css","components/ModePicker/ModePicker.tsx","utils/hourly.ts","components/HourSelect/HourSelect.tsx","components/PlayButton/PlayButton.tsx","components/PlayBar/PlayBar.tsx","components/Player/Player.tsx","containers/Main/Main.tsx","serviceWorker.ts","index.tsx","components/PlayButton/PlayButton.module.css","containers/Main/Main.module.css"],"names":["module","exports","Mode","videoIds","hours","Object","keys","HourSelect","onChange","value","disabled","className","classes","select","map","time","ModePicker","modePicker","cx","mode","selected","realtime","radio","type","name","onClick","checked","choose","PlayButton","paused","button","aria-label","icon","focusable","viewBox","aria-hidden","d","PlayBar","hour","onPlayClick","setHour","playbar","event","target","Player","videoId","useState","video","setVideo","useEffect","pauseVideo","playVideo","player","onReady","console","log","onEnd","onStateChange","data","YouTube","PlayerState","PAUSED","Main","setPaused","setMode","setRealtimeHour","Date","toLocaleString","hour12","intervalId","setInterval","clearInterval","title","controls","main","prev","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d085d1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"HourSelect_select__1SHPB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playbar\":\"PlayBar_playbar__jO2Cd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"Player_player__2p7ty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modePicker\":\"ModePicker_modePicker__3QccL\",\"mode\":\"ModePicker_mode__LM21k\",\"selected\":\"ModePicker_selected__15WRN\",\"radio\":\"ModePicker_radio__2S-Gq\"};","import React from 'react'\nimport cx from 'classnames'\nimport classes from './ModePicker.module.css'\n\nexport enum Mode {\n  realtime = 'realtime',\n  choose = 'choose'\n}\n\nconst ModePicker = ({ onChange, value }: { onChange: (event: any) => void, value: Mode }) => (\n  <fieldset className={classes.modePicker}>\n    <label className={cx(classes.mode, { [classes.selected]: Mode.realtime === value })}>\n      <input className={classes.radio} type=\"radio\" name=\"mode\" value={Mode.realtime} onClick={onChange} checked={Mode.realtime === value} />\n      {' '}\n      Realtime\n    </label>\n    <label className={cx(classes.mode, { [classes.selected]: Mode.choose === value })}>\n      <input className={classes.radio} type=\"radio\" name=\"mode\" value={Mode.choose} onClick={onChange} checked={Mode.choose === value} />\n      {' '}\n      Choose Track\n    </label>\n  </fieldset>\n)\n\nexport default ModePicker","export const videoIds: Record<string, string> = {\n  '6 AM': 'FqUlCT47ucE',\n  '7 AM': 'y6dF4h5z0ik',\n  '8 AM': 'YhpYzNZkg8E',\n  '9 AM': 'rw-NhaaC8bU',\n  '10 AM': 'mnC8Yj7GUBk',\n  '11 AM': 'bnzSJMLDm90',\n  '12 PM': 'FuMClV20DDg',\n  '1 PM': 'cTMHpVXBWVo',\n  '2 PM': 'ALRRqnJdAhc',\n  '3 PM': 'Lu7h28H52jM',\n  '4 PM': 'jHs6hIDmOFE',\n  '5 PM': 'pJvjbosEdHE',\n  '6 PM': 'lxgcDP-wppM',\n  '7 PM': 'ZMgj30uGeb0',\n  '8 PM': '9n-LArbDkIk',\n  '9 PM': 'QEkytL-anQw',\n  '10 PM': 'GFBWicff5ZE',\n  '11 PM': 'HT-djWRbNN4',\n  '12 AM': 'lqs34Ou0Rw8',\n  '1 AM': 'LJhvOKQZqC0',\n  '2 AM': 'bgdqH77h4qU',\n  '3 AM': 'C1cfkkscrI8',\n  '4 AM': 'GnLPAiLYmKw',\n  '5 AM': 'dJwg-mWj7xY',\n}\n\nexport const hours = Object.keys(videoIds)\n\nexport const getCurrentHour = () => (new Date()).toLocaleString('en-US', { hour: 'numeric', hour12: true })\n","import React from 'react'\nimport classes from './HourSelect.module.css'\nimport { hours } from '../../utils/hourly'\n\nconst HourSelect = ({ onChange, value, disabled }: { onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void, value: string, disabled: boolean }) => (\n  <select className={classes.select} value={value} onChange={onChange} disabled={disabled}>\n    {hours.map(time => (\n      <option value={time}>{time}</option>\n    ))}\n  </select>\n)\n\nexport default HourSelect","import React from 'react'\nimport classes from './PlayButton.module.css'\n\ninterface PlayButtonProps {\n  onClick: () => void,\n  paused: boolean\n}\n\nconst PlayButton = ({ onClick, paused }: PlayButtonProps) => (\n  <button onClick={onClick} className={classes.button} aria-label={paused ? 'Play' : 'Pause'}>\n    {paused ? (\n      <svg className={classes.icon} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n      ) : (\n      <svg className={classes.icon} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n    )}\n  </button>\n)\n\nexport default PlayButton\n","import React from 'react'\nimport { HourSelect } from '../HourSelect'\nimport { PlayButton } from '../PlayButton'\nimport { Mode } from '../ModePicker'\nimport classes from './PlayBar.module.css'\n\ninterface PlayBarProps {\n  hour: string\n  mode: Mode\n  onPlayClick: () => void\n  setHour: (hour: string) => void\n  paused: boolean\n}\n\nconst PlayBar = ({ hour, mode, onPlayClick, setHour, paused }: PlayBarProps) => {\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => setHour(event.target.value)\n\n  return (\n    <div className={classes.playbar}>\n      <p>\n        Now Playing:\n        {' '}\n        <HourSelect value={hour} onChange={handleChange} disabled={mode === Mode.realtime} />\n      </p>\n      <PlayButton onClick={onPlayClick} paused={paused} />\n    </div>\n  )\n}\n\nexport default PlayBar\n","import React, { useState, useEffect } from 'react'\nimport YouTube from 'react-youtube'\nimport { YouTubePlayer } from 'youtube-player/dist/types'\nimport classes from './Player.module.css'\n\ntype PlayerEvent = {\n  target: YouTubePlayer\n  data: number\n}\n\ninterface PlayerProps {\n  videoId: string\n  paused: boolean\n}\n\nconst Player = ({ videoId, paused }: PlayerProps) => {\n  const [video, setVideo] = useState<YouTubePlayer>()\n\n  useEffect(() => {\n    if (video) {\n      if (paused) {\n        video.pauseVideo()\n      } else {\n        video.playVideo()\n      }\n    }\n  }, [paused, video])\n\n  const _onReady = (event: PlayerEvent): void => {\n    event.target.playVideo()\n    console.log(\"ready\")\n    setVideo(() => event.target)\n  }\n\n  const _onEnd = (event: PlayerEvent): void => event.target.playVideo()\n\n  const _onStateChange = (event: PlayerEvent): void => {\n    if (event.data === YouTube.PlayerState.PAUSED && !paused) {\n      event.target.playVideo()\n    }\n  }\n\n  return (\n    <div className={classes.player}>\n      <YouTube videoId={videoId} onReady={_onReady} onEnd={_onEnd} onStateChange={_onStateChange} />\n    </div>\n  )\n}\n\nexport default Player","import React, { useState, useEffect } from 'react'\nimport DocumentTitle from 'react-document-title'\nimport { PlayBar, ModePicker, Mode, Player } from '../../components'\nimport { videoIds, getCurrentHour } from '../../utils/hourly'\nimport classes from './Main.module.css'\n\nconst Main = () => {\n  const [paused, setPaused] = useState<boolean>(false)\n  const [hour, setHour] = useState<string>('6 AM')\n  const [mode, setMode] = useState<Mode>(Mode.realtime)\n\n  useEffect(() => {\n    const setRealtimeHour = () => {\n      if (mode === Mode.realtime) {\n        setHour(getCurrentHour())\n      }\n    }\n\n    setRealtimeHour()\n\n    const intervalId = setInterval(setRealtimeHour, 1000); // Recheck every second\n\n    return () => clearInterval(intervalId);\n  }, [setHour, mode]);\n\n  const onPlayClick = () => setPaused(prev => !prev)\n\n  return (\n    <DocumentTitle title={`${hour} - Animal Crossing Radio`}>\n      <>\n        <h1 className={classes.title}>\n          Animal Crossing Radio\n        </h1>\n        <div className={classes.controls}>\n          <ModePicker value={mode} onChange={event => setMode(event.target.value)} />\n        </div>\n        <main className={classes.main}>\n          <PlayBar hour={hour} mode={mode} onPlayClick={onPlayClick} setHour={setHour} paused={paused} />\n          <Player videoId={videoIds[hour]} paused={paused} />\n        </main>\n      </>\n    </DocumentTitle>\n  );\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Main } from './containers/Main'\nimport './base.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"PlayButton_button__3E_or\",\"icon\":\"PlayButton_icon__u3ocl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Main_controls__t8UiW\",\"main\":\"Main_main__nGgD9\",\"title\":\"Main_title__28x4D\"};"],"sourceRoot":""}